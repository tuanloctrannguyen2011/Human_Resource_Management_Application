#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HumanResource_V4")]
	public partial class DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertContract(Contract instance);
    partial void UpdateContract(Contract instance);
    partial void DeleteContract(Contract instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertEvaluation(Evaluation instance);
    partial void UpdateEvaluation(Evaluation instance);
    partial void DeleteEvaluation(Evaluation instance);
    partial void InsertJobTitle(JobTitle instance);
    partial void UpdateJobTitle(JobTitle instance);
    partial void DeleteJobTitle(JobTitle instance);
    partial void InsertNotification(Notification instance);
    partial void UpdateNotification(Notification instance);
    partial void DeleteNotification(Notification instance);
    partial void InsertShift(Shift instance);
    partial void UpdateShift(Shift instance);
    partial void DeleteShift(Shift instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStaff_Contract(Staff_Contract instance);
    partial void UpdateStaff_Contract(Staff_Contract instance);
    partial void DeleteStaff_Contract(Staff_Contract instance);
    #endregion
		
		public DBDataContext() : 
				base(global::Data.Properties.Settings.Default.HumanResource_V4ConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Contract> Contracts
		{
			get
			{
				return this.GetTable<Contract>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Evaluation> Evaluations
		{
			get
			{
				return this.GetTable<Evaluation>();
			}
		}
		
		public System.Data.Linq.Table<JobTitle> JobTitles
		{
			get
			{
				return this.GetTable<JobTitle>();
			}
		}
		
		public System.Data.Linq.Table<Notification> Notifications
		{
			get
			{
				return this.GetTable<Notification>();
			}
		}
		
		public System.Data.Linq.Table<Shift> Shifts
		{
			get
			{
				return this.GetTable<Shift>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<Staff_Contract> Staff_Contracts
		{
			get
			{
				return this.GetTable<Staff_Contract>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _acc_id;
		
		private string _password;
		
		private string _role_name;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onacc_idChanging(string value);
    partial void Onacc_idChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void Onrole_nameChanging(string value);
    partial void Onrole_nameChanged();
    #endregion
		
		public Account()
		{
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_acc_id", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string acc_id
		{
			get
			{
				return this._acc_id;
			}
			set
			{
				if ((this._acc_id != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onacc_idChanging(value);
					this.SendPropertyChanging();
					this._acc_id = value;
					this.SendPropertyChanged("acc_id");
					this.Onacc_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="Char(300) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role_name", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string role_name
		{
			get
			{
				return this._role_name;
			}
			set
			{
				if ((this._role_name != value))
				{
					this.Onrole_nameChanging(value);
					this.SendPropertyChanging();
					this._role_name = value;
					this.SendPropertyChanged("role_name");
					this.Onrole_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Account", Storage="_Staff", ThisKey="acc_id", OtherKey="staff_id", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Account = null;
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Account = this;
						this._acc_id = value.staff_id;
					}
					else
					{
						this._acc_id = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contract")]
	public partial class Contract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _contract_id;
		
		private string _contract_name;
		
		private string _shift_id;
		
		private string _job_id;
		
		private string _dept_id;
		
		private int _salary;
		
		private System.DateTime _begin_date;
		
		private System.Nullable<System.DateTime> _end_date;
		
		private EntitySet<Staff_Contract> _Staff_Contracts;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<JobTitle> _JobTitle;
		
		private EntityRef<Shift> _Shift;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncontract_idChanging(string value);
    partial void Oncontract_idChanged();
    partial void Oncontract_nameChanging(string value);
    partial void Oncontract_nameChanged();
    partial void Onshift_idChanging(string value);
    partial void Onshift_idChanged();
    partial void Onjob_idChanging(string value);
    partial void Onjob_idChanged();
    partial void Ondept_idChanging(string value);
    partial void Ondept_idChanged();
    partial void OnsalaryChanging(int value);
    partial void OnsalaryChanged();
    partial void Onbegin_dateChanging(System.DateTime value);
    partial void Onbegin_dateChanged();
    partial void Onend_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onend_dateChanged();
    #endregion
		
		public Contract()
		{
			this._Staff_Contracts = new EntitySet<Staff_Contract>(new Action<Staff_Contract>(this.attach_Staff_Contracts), new Action<Staff_Contract>(this.detach_Staff_Contracts));
			this._Department = default(EntityRef<Department>);
			this._JobTitle = default(EntityRef<JobTitle>);
			this._Shift = default(EntityRef<Shift>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contract_id", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string contract_id
		{
			get
			{
				return this._contract_id;
			}
			set
			{
				if ((this._contract_id != value))
				{
					this.Oncontract_idChanging(value);
					this.SendPropertyChanging();
					this._contract_id = value;
					this.SendPropertyChanged("contract_id");
					this.Oncontract_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contract_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string contract_name
		{
			get
			{
				return this._contract_name;
			}
			set
			{
				if ((this._contract_name != value))
				{
					this.Oncontract_nameChanging(value);
					this.SendPropertyChanging();
					this._contract_name = value;
					this.SendPropertyChanged("contract_name");
					this.Oncontract_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shift_id", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string shift_id
		{
			get
			{
				return this._shift_id;
			}
			set
			{
				if ((this._shift_id != value))
				{
					if (this._Shift.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onshift_idChanging(value);
					this.SendPropertyChanging();
					this._shift_id = value;
					this.SendPropertyChanged("shift_id");
					this.Onshift_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_job_id", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string job_id
		{
			get
			{
				return this._job_id;
			}
			set
			{
				if ((this._job_id != value))
				{
					if (this._JobTitle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onjob_idChanging(value);
					this.SendPropertyChanging();
					this._job_id = value;
					this.SendPropertyChanged("job_id");
					this.Onjob_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dept_id", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string dept_id
		{
			get
			{
				return this._dept_id;
			}
			set
			{
				if ((this._dept_id != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondept_idChanging(value);
					this.SendPropertyChanging();
					this._dept_id = value;
					this.SendPropertyChanged("dept_id");
					this.Ondept_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salary", DbType="Int NOT NULL")]
		public int salary
		{
			get
			{
				return this._salary;
			}
			set
			{
				if ((this._salary != value))
				{
					this.OnsalaryChanging(value);
					this.SendPropertyChanging();
					this._salary = value;
					this.SendPropertyChanged("salary");
					this.OnsalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_begin_date", DbType="Date NOT NULL")]
		public System.DateTime begin_date
		{
			get
			{
				return this._begin_date;
			}
			set
			{
				if ((this._begin_date != value))
				{
					this.Onbegin_dateChanging(value);
					this.SendPropertyChanging();
					this._begin_date = value;
					this.SendPropertyChanged("begin_date");
					this.Onbegin_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_end_date", DbType="Date")]
		public System.Nullable<System.DateTime> end_date
		{
			get
			{
				return this._end_date;
			}
			set
			{
				if ((this._end_date != value))
				{
					this.Onend_dateChanging(value);
					this.SendPropertyChanging();
					this._end_date = value;
					this.SendPropertyChanged("end_date");
					this.Onend_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contract_Staff_Contract", Storage="_Staff_Contracts", ThisKey="contract_id", OtherKey="contract_id")]
		public EntitySet<Staff_Contract> Staff_Contracts
		{
			get
			{
				return this._Staff_Contracts;
			}
			set
			{
				this._Staff_Contracts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Contract", Storage="_Department", ThisKey="dept_id", OtherKey="dept_id", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._dept_id = value.dept_id;
					}
					else
					{
						this._dept_id = default(string);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobTitle_Contract", Storage="_JobTitle", ThisKey="job_id", OtherKey="job_id", IsForeignKey=true)]
		public JobTitle JobTitle
		{
			get
			{
				return this._JobTitle.Entity;
			}
			set
			{
				JobTitle previousValue = this._JobTitle.Entity;
				if (((previousValue != value) 
							|| (this._JobTitle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobTitle.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._JobTitle.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._job_id = value.job_id;
					}
					else
					{
						this._job_id = default(string);
					}
					this.SendPropertyChanged("JobTitle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shift_Contract", Storage="_Shift", ThisKey="shift_id", OtherKey="shift_id", IsForeignKey=true)]
		public Shift Shift
		{
			get
			{
				return this._Shift.Entity;
			}
			set
			{
				Shift previousValue = this._Shift.Entity;
				if (((previousValue != value) 
							|| (this._Shift.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shift.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._Shift.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._shift_id = value.shift_id;
					}
					else
					{
						this._shift_id = default(string);
					}
					this.SendPropertyChanged("Shift");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staff_Contracts(Staff_Contract entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_Staff_Contracts(Staff_Contract entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _dept_id;
		
		private string _dept_name;
		
		private EntitySet<Contract> _Contracts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ondept_idChanging(string value);
    partial void Ondept_idChanged();
    partial void Ondept_nameChanging(string value);
    partial void Ondept_nameChanged();
    #endregion
		
		public Department()
		{
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dept_id", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string dept_id
		{
			get
			{
				return this._dept_id;
			}
			set
			{
				if ((this._dept_id != value))
				{
					this.Ondept_idChanging(value);
					this.SendPropertyChanging();
					this._dept_id = value;
					this.SendPropertyChanged("dept_id");
					this.Ondept_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dept_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string dept_name
		{
			get
			{
				return this._dept_name;
			}
			set
			{
				if ((this._dept_name != value))
				{
					this.Ondept_nameChanging(value);
					this.SendPropertyChanging();
					this._dept_name = value;
					this.SendPropertyChanged("dept_name");
					this.Ondept_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Contract", Storage="_Contracts", ThisKey="dept_id", OtherKey="dept_id")]
		public EntitySet<Contract> Contracts
		{
			get
			{
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Evaluation")]
	public partial class Evaluation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _eva_id;
		
		private string _eva_type;
		
		private string _eva_desc;
		
		private string _staff_id;
		
		private System.DateTime _eva_date;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oneva_idChanging(string value);
    partial void Oneva_idChanged();
    partial void Oneva_typeChanging(string value);
    partial void Oneva_typeChanged();
    partial void Oneva_descChanging(string value);
    partial void Oneva_descChanged();
    partial void Onstaff_idChanging(string value);
    partial void Onstaff_idChanged();
    partial void Oneva_dateChanging(System.DateTime value);
    partial void Oneva_dateChanged();
    #endregion
		
		public Evaluation()
		{
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eva_id", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string eva_id
		{
			get
			{
				return this._eva_id;
			}
			set
			{
				if ((this._eva_id != value))
				{
					this.Oneva_idChanging(value);
					this.SendPropertyChanging();
					this._eva_id = value;
					this.SendPropertyChanged("eva_id");
					this.Oneva_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eva_type", DbType="Char(10)")]
		public string eva_type
		{
			get
			{
				return this._eva_type;
			}
			set
			{
				if ((this._eva_type != value))
				{
					this.Oneva_typeChanging(value);
					this.SendPropertyChanging();
					this._eva_type = value;
					this.SendPropertyChanged("eva_type");
					this.Oneva_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eva_desc", DbType="NVarChar(100)")]
		public string eva_desc
		{
			get
			{
				return this._eva_desc;
			}
			set
			{
				if ((this._eva_desc != value))
				{
					this.Oneva_descChanging(value);
					this.SendPropertyChanging();
					this._eva_desc = value;
					this.SendPropertyChanged("eva_desc");
					this.Oneva_descChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staff_id", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string staff_id
		{
			get
			{
				return this._staff_id;
			}
			set
			{
				if ((this._staff_id != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstaff_idChanging(value);
					this.SendPropertyChanging();
					this._staff_id = value;
					this.SendPropertyChanged("staff_id");
					this.Onstaff_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eva_date", DbType="Date NOT NULL")]
		public System.DateTime eva_date
		{
			get
			{
				return this._eva_date;
			}
			set
			{
				if ((this._eva_date != value))
				{
					this.Oneva_dateChanging(value);
					this.SendPropertyChanging();
					this._eva_date = value;
					this.SendPropertyChanged("eva_date");
					this.Oneva_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Evaluation", Storage="_Staff", ThisKey="staff_id", OtherKey="staff_id", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._staff_id = value.staff_id;
					}
					else
					{
						this._staff_id = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobTitle")]
	public partial class JobTitle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _job_id;
		
		private string _job_name;
		
		private string _job_desc;
		
		private EntitySet<Contract> _Contracts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onjob_idChanging(string value);
    partial void Onjob_idChanged();
    partial void Onjob_nameChanging(string value);
    partial void Onjob_nameChanged();
    partial void Onjob_descChanging(string value);
    partial void Onjob_descChanged();
    #endregion
		
		public JobTitle()
		{
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_job_id", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string job_id
		{
			get
			{
				return this._job_id;
			}
			set
			{
				if ((this._job_id != value))
				{
					this.Onjob_idChanging(value);
					this.SendPropertyChanging();
					this._job_id = value;
					this.SendPropertyChanged("job_id");
					this.Onjob_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_job_name", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string job_name
		{
			get
			{
				return this._job_name;
			}
			set
			{
				if ((this._job_name != value))
				{
					this.Onjob_nameChanging(value);
					this.SendPropertyChanging();
					this._job_name = value;
					this.SendPropertyChanged("job_name");
					this.Onjob_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_job_desc", DbType="NVarChar(500)")]
		public string job_desc
		{
			get
			{
				return this._job_desc;
			}
			set
			{
				if ((this._job_desc != value))
				{
					this.Onjob_descChanging(value);
					this.SendPropertyChanging();
					this._job_desc = value;
					this.SendPropertyChanged("job_desc");
					this.Onjob_descChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobTitle_Contract", Storage="_Contracts", ThisKey="job_id", OtherKey="job_id")]
		public EntitySet<Contract> Contracts
		{
			get
			{
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.JobTitle = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.JobTitle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notification")]
	public partial class Notification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _noti_id;
		
		private string _noti_desc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onnoti_idChanging(string value);
    partial void Onnoti_idChanged();
    partial void Onnoti_descChanging(string value);
    partial void Onnoti_descChanged();
    #endregion
		
		public Notification()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_noti_id", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string noti_id
		{
			get
			{
				return this._noti_id;
			}
			set
			{
				if ((this._noti_id != value))
				{
					this.Onnoti_idChanging(value);
					this.SendPropertyChanging();
					this._noti_id = value;
					this.SendPropertyChanged("noti_id");
					this.Onnoti_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_noti_desc", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string noti_desc
		{
			get
			{
				return this._noti_desc;
			}
			set
			{
				if ((this._noti_desc != value))
				{
					this.Onnoti_descChanging(value);
					this.SendPropertyChanging();
					this._noti_desc = value;
					this.SendPropertyChanged("noti_desc");
					this.Onnoti_descChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shift")]
	public partial class Shift : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _shift_id;
		
		private string _shift_time;
		
		private EntitySet<Contract> _Contracts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onshift_idChanging(string value);
    partial void Onshift_idChanged();
    partial void Onshift_timeChanging(string value);
    partial void Onshift_timeChanged();
    #endregion
		
		public Shift()
		{
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shift_id", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string shift_id
		{
			get
			{
				return this._shift_id;
			}
			set
			{
				if ((this._shift_id != value))
				{
					this.Onshift_idChanging(value);
					this.SendPropertyChanging();
					this._shift_id = value;
					this.SendPropertyChanged("shift_id");
					this.Onshift_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shift_time", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string shift_time
		{
			get
			{
				return this._shift_time;
			}
			set
			{
				if ((this._shift_time != value))
				{
					this.Onshift_timeChanging(value);
					this.SendPropertyChanging();
					this._shift_time = value;
					this.SendPropertyChanged("shift_time");
					this.Onshift_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shift_Contract", Storage="_Contracts", ThisKey="shift_id", OtherKey="shift_id")]
		public EntitySet<Contract> Contracts
		{
			get
			{
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Shift = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Shift = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _staff_id;
		
		private string _staff_name;
		
		private string _staff_gender;
		
		private System.DateTime _staff_birthdate;
		
		private string _staff_phoneNo;
		
		private string _staff_mail;
		
		private string _staff_address;
		
		private bool _staff_status;
		
		private EntityRef<Account> _Account;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntitySet<Staff_Contract> _Staff_Contracts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onstaff_idChanging(string value);
    partial void Onstaff_idChanged();
    partial void Onstaff_nameChanging(string value);
    partial void Onstaff_nameChanged();
    partial void Onstaff_genderChanging(string value);
    partial void Onstaff_genderChanged();
    partial void Onstaff_birthdateChanging(System.DateTime value);
    partial void Onstaff_birthdateChanged();
    partial void Onstaff_phoneNoChanging(string value);
    partial void Onstaff_phoneNoChanged();
    partial void Onstaff_mailChanging(string value);
    partial void Onstaff_mailChanged();
    partial void Onstaff_addressChanging(string value);
    partial void Onstaff_addressChanged();
    partial void Onstaff_statusChanging(bool value);
    partial void Onstaff_statusChanged();
    #endregion
		
		public Staff()
		{
			this._Account = default(EntityRef<Account>);
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._Staff_Contracts = new EntitySet<Staff_Contract>(new Action<Staff_Contract>(this.attach_Staff_Contracts), new Action<Staff_Contract>(this.detach_Staff_Contracts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staff_id", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string staff_id
		{
			get
			{
				return this._staff_id;
			}
			set
			{
				if ((this._staff_id != value))
				{
					this.Onstaff_idChanging(value);
					this.SendPropertyChanging();
					this._staff_id = value;
					this.SendPropertyChanged("staff_id");
					this.Onstaff_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staff_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string staff_name
		{
			get
			{
				return this._staff_name;
			}
			set
			{
				if ((this._staff_name != value))
				{
					this.Onstaff_nameChanging(value);
					this.SendPropertyChanging();
					this._staff_name = value;
					this.SendPropertyChanged("staff_name");
					this.Onstaff_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staff_gender", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string staff_gender
		{
			get
			{
				return this._staff_gender;
			}
			set
			{
				if ((this._staff_gender != value))
				{
					this.Onstaff_genderChanging(value);
					this.SendPropertyChanging();
					this._staff_gender = value;
					this.SendPropertyChanged("staff_gender");
					this.Onstaff_genderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staff_birthdate", DbType="Date NOT NULL")]
		public System.DateTime staff_birthdate
		{
			get
			{
				return this._staff_birthdate;
			}
			set
			{
				if ((this._staff_birthdate != value))
				{
					this.Onstaff_birthdateChanging(value);
					this.SendPropertyChanging();
					this._staff_birthdate = value;
					this.SendPropertyChanged("staff_birthdate");
					this.Onstaff_birthdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staff_phoneNo", DbType="Char(11) NOT NULL", CanBeNull=false)]
		public string staff_phoneNo
		{
			get
			{
				return this._staff_phoneNo;
			}
			set
			{
				if ((this._staff_phoneNo != value))
				{
					this.Onstaff_phoneNoChanging(value);
					this.SendPropertyChanging();
					this._staff_phoneNo = value;
					this.SendPropertyChanged("staff_phoneNo");
					this.Onstaff_phoneNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staff_mail", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string staff_mail
		{
			get
			{
				return this._staff_mail;
			}
			set
			{
				if ((this._staff_mail != value))
				{
					this.Onstaff_mailChanging(value);
					this.SendPropertyChanging();
					this._staff_mail = value;
					this.SendPropertyChanged("staff_mail");
					this.Onstaff_mailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staff_address", DbType="Char(200) NOT NULL", CanBeNull=false)]
		public string staff_address
		{
			get
			{
				return this._staff_address;
			}
			set
			{
				if ((this._staff_address != value))
				{
					this.Onstaff_addressChanging(value);
					this.SendPropertyChanging();
					this._staff_address = value;
					this.SendPropertyChanged("staff_address");
					this.Onstaff_addressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staff_status", DbType="Bit NOT NULL")]
		public bool staff_status
		{
			get
			{
				return this._staff_status;
			}
			set
			{
				if ((this._staff_status != value))
				{
					this.Onstaff_statusChanging(value);
					this.SendPropertyChanging();
					this._staff_status = value;
					this.SendPropertyChanged("staff_status");
					this.Onstaff_statusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Account", Storage="_Account", ThisKey="staff_id", OtherKey="acc_id", IsUnique=true, IsForeignKey=false)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Staff = null;
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Staff = this;
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Evaluation", Storage="_Evaluations", ThisKey="staff_id", OtherKey="staff_id")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Staff_Contract", Storage="_Staff_Contracts", ThisKey="staff_id", OtherKey="staff_id")]
		public EntitySet<Staff_Contract> Staff_Contracts
		{
			get
			{
				return this._Staff_Contracts;
			}
			set
			{
				this._Staff_Contracts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Staff_Contracts(Staff_Contract entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Staff_Contracts(Staff_Contract entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff_Contract")]
	public partial class Staff_Contract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _staff_id;
		
		private string _contract_id;
		
		private EntityRef<Contract> _Contract;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onstaff_idChanging(string value);
    partial void Onstaff_idChanged();
    partial void Oncontract_idChanging(string value);
    partial void Oncontract_idChanged();
    #endregion
		
		public Staff_Contract()
		{
			this._Contract = default(EntityRef<Contract>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staff_id", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string staff_id
		{
			get
			{
				return this._staff_id;
			}
			set
			{
				if ((this._staff_id != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstaff_idChanging(value);
					this.SendPropertyChanging();
					this._staff_id = value;
					this.SendPropertyChanged("staff_id");
					this.Onstaff_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contract_id", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string contract_id
		{
			get
			{
				return this._contract_id;
			}
			set
			{
				if ((this._contract_id != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncontract_idChanging(value);
					this.SendPropertyChanging();
					this._contract_id = value;
					this.SendPropertyChanged("contract_id");
					this.Oncontract_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contract_Staff_Contract", Storage="_Contract", ThisKey="contract_id", OtherKey="contract_id", IsForeignKey=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.Staff_Contracts.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.Staff_Contracts.Add(this);
						this._contract_id = value.contract_id;
					}
					else
					{
						this._contract_id = default(string);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Staff_Contract", Storage="_Staff", ThisKey="staff_id", OtherKey="staff_id", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Staff_Contracts.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Staff_Contracts.Add(this);
						this._staff_id = value.staff_id;
					}
					else
					{
						this._staff_id = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
